import { ModelPlacement } from "./ViewerAPI";
/**
 * The data structure representing a color composed of RGBA components.
 */
export interface ColorRGBA {
    /** The Red component of the color [0, 255] */
    r: number;
    /** The Green component of the color [0, 255] */
    g: number;
    /** The Blue component of the color [0, 255] */
    b: number;
    /** The Alpha component of the color [0, 255] */
    a: number;
}
/** The HEX color */
export declare type HexColor = string;
/** The type of the model identifier */
export declare type ModelId = string;
/** The type of the model version identifier */
export declare type ModelVersionId = string;
/** The type of the object identifier. This is the identifier that is used to uniquely identify an object (e.g. externally in Connect).
 * @remarks Use the {@link ViewerAPI.convertToObjectRuntimeIds} to retrieve the {@link ObjectRuntimeId}.
 */
export declare type ObjectId = string;
/** The type of the object runtime identifier. The is the identifier that is used to query the object at runtime (e.g. internally in 3D Viewer).
 * @remarks Use the {@link ViewerAPI.convertToObjectIds} to retrieve the {@link ObjectId}.
 */
export declare type ObjectRuntimeId = number;
/** The type of the model state */
export declare type ModelState = "loaded" | "unloaded";
/** The 3D Vector. */
export interface Vector3 {
    /** The X-coordinate. */
    x: number;
    /** The Y-coordinate. */
    y: number;
    /** The Z-coordinate. */
    z: number;
}
/** The data for pick event */
export interface PointPickedDetail {
    /** The position. */
    position: Vector3;
    /** The normal. */
    normal: Vector3;
    /** The normal. */
    modelId: string;
    /** The object runtime id. */
    objectRuntimeId: number;
}
/** In the Quaternion the identity is pointing down (negative Z) and up direction is pointing towards positive Y axis. */
export interface Quaternion {
    /** The X-coordinate. */
    x: number;
    /** The Y-coordinate. */
    y: number;
    /** The Z-coordinate. */
    z: number;
    /** The W-coordinate. */
    w: number;
}
/**
 * The data structure representing a model identifier.
 */
export interface ModelVersionIdentifier {
    /** The model identifier */
    id: ModelId;
    /** The model version identifier */
    versionId?: ModelVersionId;
}
/**
 * The data structure representing a model in Trimble Connect project ({@link ConnectProject}).
 */
export interface ModelSpec {
    /** The model identifier */
    id: ModelId;
    /** The model version identifier */
    versionId: ModelVersionId;
    /** The flag indicating if the model version is latest version. */
    isLatestVersion: boolean;
    /** The model name */
    name: string;
    /** The model state */
    state: string;
    /** The model type */
    type: string;
    /** The model placement */
    placement?: ModelPlacement;
}
/** The object property. */
export interface Property {
    /**
     * The property name.
     * This is the original property name in the model - the property names in the Trimble Connect UI are formatted differently for better readability.
     */
    name: string;
    /** The property value. */
    value: string | number;
    /** The property type. */
    type: PropertyType;
}
/** The property type. */
export declare const enum PropertyType {
    /** Value is in millimeters (`mm`) */
    LengthMeasure = 0,
    /** Value is in square meters (`m2`) */
    AreaMeasure = 1,
    /** Value is in cubic meters (`m3`) */
    VolumeMeasure = 2,
    /** Value is in kilograms (`kg`) */
    MassMeasure = 3,
    /** Value is in degrees (`Â°`) */
    AngleMeasure = 4,
    /** The string value type */
    StringValue = 5,
    /** The integer value type */
    IntValue = 6,
    /** The double value type */
    DoubleValue = 7,
    /** Value is a [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) representing a UNIX timestamp */
    DateTime = 8,
    /** Value is a Javascript boolean `true` or `false` representing a boolean TRUE or FALSE.
     *
     *  Value is a nullable, so `null` and `undefined` must also be expected. */
    Logical = 9,
    /** Value is an integer `1` or `0` reprenting a boolean TRUE or FALSE */
    Boolean = 10
}
/** The product detail. */
export interface Product {
    /** The name of the product */
    name?: string;
    /** The description of the product */
    description?: string;
    /** The object type of the product */
    objectType?: string;
}
/** The object property set. */
export interface PropertySet {
    /** The name of the property set */
    set?: string;
    /** The properties of the property set */
    properties?: Property[];
}
/**
 * The data structure representing an object entity in Trimble Connect 3D Viewer.
 */
export interface ObjectProperties {
    /** The object identifier */
    id: number;
    /** The object class */
    class?: string;
    /** The object product */
    product?: Product;
    /** The object properties */
    properties?: PropertySet[];
    /** The object color */
    color?: HexColor;
    /** The object position */
    position?: Vector3;
}
/** The data structure representing the entities belonging to a model in Trimble Connect project ({@link ConnectProject}). */
export interface ModelObjects {
    /** The model identifier */
    modelId: ModelId;
    /** The model object entities */
    objects: ObjectProperties[];
}
/** The data structure representing the object runtime IDs belonging to a model in Trimble Connect project ({@link ConnectProject}). */
export interface ModelObjectIds {
    /** The model identifier. The `modelId` equals to `File.versionId` for models stored as files in Trimble Connect. */
    modelId: ModelId;
    /** The model object runtime identifiers */
    objectRuntimeIds?: ObjectRuntimeId[];
    /** Retrieve objects recursively */
    recursive?: boolean;
}
/** The data structure representing the layers belonging to a model in Trimble Connect project ({@link ConnectProject}). */
export interface Layer {
    /** The layer name */
    name: string;
    /** The layer visibility */
    visible: boolean;
}
/** The view entity states. */
export declare const enum ViewEntityStates {
    /** The selected state. */
    Selected = 1,
    /** The hidden state. */
    Hidden = 4,
    /** The selected and hidden state. */
    SelectedHidden = 5,
    /** The visible state. */
    Visible = 6,
    /** The selected and visible state. */
    SelectedVisible = 7,
    /** The highlighted state. */
    Highlighted = 8
}
